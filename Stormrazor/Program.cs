using AngleSharp.Html.Dom;
using AngleSharp.Html.Parser;
using System;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;

namespace Stormrazor
{
    class Program
    {
        static async Task<int> Main(string[] args)
        {
            string svgPath = null;

            if (args.Length < 1)
            {
                do
                {
                    Console.WriteLine("Enter path to SVG file or drag 'n drop a SVG file onto this console");
                    svgPath = Console.ReadLine();
                } while (File.Exists(svgPath) == false);
            }
            else
            {
                if (File.Exists(args[0]) == false)
                {
                    Console.WriteLine("Path does not exist!");
                    return 1;
                }

                svgPath = args[0];
            }

            Console.WriteLine($"Input file: {svgPath}");

            string svgSource = File.ReadAllText(svgPath);

            HtmlParser parser = new HtmlParser();
            IHtmlDocument doc = await parser.ParseDocumentAsync(svgSource);

            float scale;
            float scaleY;

            do
            {
                Console.Write("Enter document scale: ");
            } while (float.TryParse(Console.ReadLine(), NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out scale) == false);

            do
            {
                Console.Write("Enter Y-axis scale (relative to X-axis): ");
            } while (float.TryParse(Console.ReadLine(), NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out scaleY) == false);

            var lines = doc.All.Where(x => x.TagName == "line");

            if (lines.Count() == 0)
            {
                Console.WriteLine("No line elements found in file!");
                return 1;
            }

            Console.Write("Enter output path: ");
            string outFile = Console.ReadLine().Trim();

            using (TextWriter tw = new StreamWriter(outFile))
            {
                tw.WriteLine($"# Generated by Stormrazor v{Assembly.GetExecutingAssembly().GetName().Version}");
                tw.WriteLine($"# Generated on {DateTime.Now}\n");
                tw.WriteLine("echo Setting options");
                tw.WriteLine("verbose 1");
                tw.WriteLine("sync 0");
                tw.WriteLine("blocking 1");
                tw.WriteLine("setlimits 60 60");
                tw.WriteLine();

                foreach (var line in lines)
                {
                    int x1 = (int)float.Parse(line.GetAttribute("x1"), NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);
                    int y1 = (int)float.Parse(line.GetAttribute("y1"), NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);
                    int x2 = (int)float.Parse(line.GetAttribute("x2"), NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);
                    int y2 = (int)float.Parse(line.GetAttribute("y2"), NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture);

                    tw.WriteLine($"move {(int)(x1 * scale)} {(int)(y1 * scale * scaleY)}");
                    tw.WriteLine("pen 1");
                    tw.WriteLine($"move {(int)(x2 * scale)} {(int)(y2 * scale * scaleY)}");
                    tw.WriteLine("pen 0");
                }
            }

            Console.WriteLine($"Wrote Wammus commands to {outFile}");
            Console.WriteLine("Press enter to exit");
            Console.ReadLine();
            return 0;
        }
    }
}
